// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: record.proto

package walpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Operation
type Operation int32

const (
	Operation_CREATE Operation = 0
	Operation_UPDATE Operation = 1
	Operation_PUT    Operation = 2
	Operation_DELETE Operation = 3
)

var Operation_name = map[int32]string{
	0: "CREATE",
	1: "UPDATE",
	2: "PUT",
	3: "DELETE",
}
var Operation_value = map[string]int32{
	"CREATE": 0,
	"UPDATE": 1,
	"PUT":    2,
	"DELETE": 3,
}

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}
func (x Operation) String() string {
	return proto.EnumName(Operation_name, int32(x))
}
func (x *Operation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Operation_value, data, "Operation")
	if err != nil {
		return err
	}
	*x = Operation(value)
	return nil
}
func (Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_record_7417039b24ef1af2, []int{0}
}

type Record struct {
	// ProcessID identifies different processes writing
	// to the log, processes have to increase monotonically
	// and be different for different processes writing
	// to the same file to preserve integrity
	ProcessID uint64 `protobuf:"varint,1,req,name=ProcessID" json:"ProcessID"`
	// ID is a record ID that is monothonically incremented by each process
	// Several records have the same id if they carry on the value split
	// into multiple containers, ID is monothonically incremented by each process.
	ID uint64 `protobuf:"varint,2,req,name=ID" json:"ID"`
	// PartID is used to identify a part index (starting from 0)
	// in a multi-part record, subsequent parts have incremental
	// ids (0, 1, 2, 3 ...)
	// Together, (ProcessID, ID, PartID) form a unique
	// position index 3-tuple in a log.
	PartID int32 `protobuf:"varint,3,req,name=PartID" json:"PartID"`
	// LastPart is false when record is split into multiple parts
	// and this is not the last part, true if this is a last record
	// of the multi-part record. If PartID is 0 and LastPart is true
	// it means that this is a single part record.
	LastPart bool `protobuf:"varint,4,req,name=LastPart" json:"LastPart"`
	// Operation defines operation type
	Operation Operation `protobuf:"varint,5,req,name=Operation,enum=walpb.Operation" json:"Operation"`
	// Key is the key in the key value tuple being created, updated or deleted
	Key []byte `protobuf:"bytes,6,opt,name=Key" json:"Key,omitempty"`
	// Val is set for all operations except DELETE
	Val                  []byte   `protobuf:"bytes,7,opt,name=Val" json:"Val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_record_7417039b24ef1af2, []int{0}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(dst, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Record)(nil), "walpb.Record")
	proto.RegisterEnum("walpb.Operation", Operation_name, Operation_value)
}
func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.ProcessID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.ID))
	dAtA[i] = 0x18
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.PartID))
	dAtA[i] = 0x20
	i++
	if m.LastPart {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x28
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Operation))
	if m.Key != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Val != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Val)))
		i += copy(dAtA[i:], m.Val)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRecord(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Record) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRecord(uint64(m.ProcessID))
	n += 1 + sovRecord(uint64(m.ID))
	n += 1 + sovRecord(uint64(m.PartID))
	n += 2
	n += 1 + sovRecord(uint64(m.Operation))
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.Val != nil {
		l = len(m.Val)
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRecord(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRecord(x uint64) (n int) {
	return sovRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Record) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessID", wireType)
			}
			m.ProcessID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartID", wireType)
			}
			m.PartID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPart", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastPart = bool(v != 0)
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= (Operation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = append(m.Val[:0], dAtA[iNdEx:postIndex]...)
			if m.Val == nil {
				m.Val = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ProcessID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PartID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LastPart")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Operation")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRecord
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRecord
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRecord(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRecord = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecord   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("record.proto", fileDescriptor_record_7417039b24ef1af2) }

var fileDescriptor_record_7417039b24ef1af2 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0xce, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0x06, 0xf0, 0x26, 0xfd, 0xb3, 0xed, 0x65, 0x48, 0x08, 0x3b, 0x04, 0x91, 0x1a, 0x76, 0x2a,
	0x1e, 0x2a, 0x88, 0x07, 0xaf, 0xce, 0xe4, 0x50, 0x1c, 0x58, 0x4a, 0xb7, 0x7b, 0x9c, 0x65, 0x08,
	0xc5, 0x94, 0xb4, 0x20, 0x7e, 0xc3, 0x1e, 0xfd, 0x00, 0x22, 0xda, 0x4f, 0x22, 0xe9, 0x6a, 0xb7,
	0xdb, 0x93, 0xdf, 0x13, 0x5e, 0x1e, 0x98, 0x9b, 0x62, 0xa7, 0xcd, 0x4b, 0x5c, 0x19, 0xdd, 0x68,
	0xea, 0xbf, 0xab, 0xb2, 0x7a, 0x3e, 0x5f, 0xec, 0xf5, 0x5e, 0xf7, 0x72, 0x6d, 0xd3, 0xa1, 0x5c,
	0x7e, 0x21, 0x08, 0xb2, 0xfe, 0x37, 0x5d, 0xc2, 0x2c, 0x35, 0x7a, 0x57, 0xd4, 0x75, 0x22, 0x18,
	0xe2, 0x38, 0xf2, 0x56, 0x5e, 0xfb, 0x7d, 0xe9, 0x64, 0x47, 0xa6, 0x0b, 0xc0, 0x89, 0x60, 0xf8,
	0xa4, 0xc4, 0x89, 0xa0, 0x17, 0x10, 0xa4, 0xca, 0x34, 0x89, 0x60, 0x2e, 0xc7, 0x91, 0x3f, 0x34,
	0x83, 0x51, 0x0e, 0xd3, 0xb5, 0xaa, 0x1b, 0xfb, 0x62, 0x1e, 0xc7, 0xd1, 0x74, 0xe8, 0x47, 0xa5,
	0xb7, 0x30, 0x7b, 0xaa, 0x0a, 0xa3, 0x9a, 0x57, 0xfd, 0xc6, 0x7c, 0x8e, 0xa3, 0xb3, 0x1b, 0x12,
	0xf7, 0xab, 0xe3, 0xd1, 0xff, 0xb7, 0x8c, 0x40, 0x09, 0xb8, 0x8f, 0xc5, 0x07, 0x0b, 0x38, 0x8a,
	0xe6, 0x99, 0x8d, 0x56, 0xb6, 0xaa, 0x64, 0x93, 0x83, 0x6c, 0x55, 0x79, 0x75, 0x77, 0x72, 0x99,
	0x02, 0x04, 0x0f, 0x99, 0xbc, 0xcf, 0x25, 0x71, 0x6c, 0xde, 0xa4, 0xc2, 0x66, 0x44, 0x27, 0xe0,
	0xa6, 0x9b, 0x9c, 0x60, 0x8b, 0x42, 0xae, 0x65, 0x2e, 0x89, 0xbb, 0x22, 0xed, 0x6f, 0xe8, 0xb4,
	0x5d, 0x88, 0x3e, 0xbb, 0x10, 0xfd, 0x74, 0x21, 0xfa, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x73, 0x1b,
	0x8a, 0xca, 0x56, 0x01, 0x00, 0x00,
}
